// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL") // Using your Accelerate URL
}

// Core Models

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  settings    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users     User[]
  assets    Asset[]
  vendors   Vendor[]
  contracts Contract[]
  documents Document[]

  @@map("organizations")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  accounts       Account[]
  sessions       Session[]
  
  // Audit trail
  createdAssets    Asset[] @relation("AssetCreatedBy")
  updatedAssets    Asset[] @relation("AssetUpdatedBy")
  createdContracts Contract[] @relation("ContractCreatedBy")
  updatedContracts Contract[] @relation("ContractUpdatedBy")

  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Asset Management Models

model Asset {
  id              String      @id @default(cuid())
  name            String
  description     String?
  assetType       AssetType
  status          AssetStatus @default(ACTIVE)
  serialNumber    String?
  model           String?
  manufacturer    String?
  location        String?
  purchaseDate    DateTime?
  purchasePrice   Decimal?    @db.Decimal(10, 2)
  warrantyExpiry  DateTime?
  notes           String?
  customFields    Json        @default("{}")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  vendorId       String?
  vendor         Vendor?      @relation(fields: [vendorId], references: [id])
  contractId     String?
  contract       Contract?    @relation(fields: [contractId], references: [id])
  
  // Audit trail
  createdById String?
  createdBy   User?   @relation("AssetCreatedBy", fields: [createdById], references: [id])
  updatedById String?
  updatedBy   User?   @relation("AssetUpdatedBy", fields: [updatedById], references: [id])

  documents Document[]

  @@map("assets")
}

model Vendor {
  id          String       @id @default(cuid())
  name        String
  description String?
  contactInfo Json         @default("{}")
  website     String?
  status      VendorStatus @default(ACTIVE)
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  assets         Asset[]
  contracts      Contract[]

  @@map("vendors")
}

model Contract {
  id               String         @id @default(cuid())
  title            String
  description      String?
  contractType     ContractType
  status           ContractStatus @default(DRAFT)
  startDate        DateTime
  endDate          DateTime?
  renewalDate      DateTime?
  value            Decimal?       @db.Decimal(12, 2)
  terms            String?
  autoRenewal      Boolean        @default(false)
  renewalPeriod    Int?           // months
  notificationDays Int            @default(30)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  vendorId       String?
  vendor         Vendor?      @relation(fields: [vendorId], references: [id])
  assets         Asset[]
  documents      Document[]
  
  // Audit trail
  createdById String?
  createdBy   User?   @relation("ContractCreatedBy", fields: [createdById], references: [id])
  updatedById String?
  updatedBy   User?   @relation("ContractUpdatedBy", fields: [updatedById], references: [id])

  @@map("contracts")
}

model Document {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  description  String?
  tags         String[] @default([])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  assetId        String?
  asset          Asset?       @relation(fields: [assetId], references: [id])
  contractId     String?
  contract       Contract?    @relation(fields: [contractId], references: [id])

  @@map("documents")
}

// Enums

enum UserRole {
  SUPER_ADMIN
  TRUSTED_ADVISOR
  ORG_ADMIN
  MANAGER
  USER
}

enum AssetType {
  HARDWARE
  SOFTWARE
  NETWORK
  MOBILE
  PERIPHERAL
  OTHER
}

enum AssetStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  RETIRED
  DISPOSED
}

enum VendorStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum ContractType {
  SOFTWARE_LICENSE
  HARDWARE_SUPPORT
  SERVICE_AGREEMENT
  MAINTENANCE
  SUBSCRIPTION
  OTHER
}

enum ContractStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
  PENDING_RENEWAL
}